# to test it you need a worklet.pcm file.

This file needs to fit the webaudio format :

```
 The buffer contains data in the following format: non-interleaved IEEE754 32-bit linear PCM with a nominal range between -1 and +1, that is, 32bits floating point buffer, with each samples between -1.0 and 1.0. If the AudioBuffer has multiple channels, they are stored in separate buffer.
```

The WebAudio graph (tested on a tot chrome build on macos), shows the AudioBufferSource is connected the way it should be.


Bindings:


```
python3 ~/vlc/emscripten/tools/webidl_binder.py my_dummy.idl glue

emcc test.cpp --bind --post-js glue.js --preload-file . -o out/test.html -s TOTAL_MEMORY=1GB ```


Failed to bind all the calls, it works well with Asyncify:
```
emcc -O3 test.cpp --bind --profiling -s ASYNCIFY=1 -s 'ASYNCIFY_IMPORTS=["add_worklet_node"]'  --preload-file worklet-processor.js -o out/test.html -s TOTAL_MEMORY=1GB -std=c++11
```

With this, VLC can start the worklet on the first user interaction, the worklet will have a template code that will read from a Ring Buffer each 128 frames :
VLC decoder thread will have to write continuously to the Ring buffer, in a dedicated thread.
 